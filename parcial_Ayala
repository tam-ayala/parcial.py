from abc import ABC, abstractmethod

# Clase abstracta
class LibraryItem(ABC):
    def __init__(self, title: str, item_id: int):
        if not title or not isinstance(title, str):
            raise ValueError("Title must be a non-empty string.")
        if not isinstance(item_id, int) or item_id <= 0:
            raise ValueError("Item ID must be a positive integer.")
        
        self.title = title
        self.item_id = item_id

    @abstractmethod
    def checkout(self, user: str) -> str:
        pass

# Subclase Book
class Book(LibraryItem):
    def __init__(self, title: str, item_id: int, author: str, pages: int):
        super().__init__(title, item_id)
        if not author or not isinstance(author, str):
            raise ValueError("Author must be a non-empty string.")
        if not isinstance(pages, int) or pages <= 0:
            raise ValueError("Pages must be a positive integer.")
        
        self.author = author
        self.pages = pages

    def checkout(self, user: str) -> str:
        return f"Book '{self.title}' checked out by {user}."

# Subclase Magazine
class Magazine(LibraryItem):
    def __init__(self, title: str, item_id: int, issue_number: int):
        super().__init__(title, item_id)
        if not isinstance(issue_number, int) or issue_number <= 0:
            raise ValueError("Issue number must be a positive integer.")
        
        self.issue_number = issue_number

    def checkout(self, user: str) -> str:
        return f"Magazine '{self.title}' issue {self.issue_number} checked out by {user}."

# Ejemplo de uso:
if __name__ == "__main__":
    book = Book("1984", 101, "George Orwell", 328)
    magazine = Magazine("National Geographic", 202, 56)

    print(book.checkout("Alice"))
    print(magazine.checkout("Bob"))
